apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: create-dockerfile
spec:
  params:
    - name: base-image
      type: string
      description: "Base image (e.g. 'python:3.9-slim' or 'node:16-alpine')"
    - name: command
      type: string
      description: "Executable name to run inside the container (e.g. 'python', 'uvx', 'npx')"
    - name: args
      type: string
      default: ""
      description: |
        Space-separated arguments to pass to the command.  
        Example: "arg1 arg2 arg3"
    - name: envs
      type: string
      default: ""
      description: |
        Space-separated environment variables in KEY=VALUE form.  
        Example: "KEY1=VAL1 KEY2=VAL2"

  workspaces:
    - name: shared-workspace
      description: "Workspace where the Dockerfile will be written"

  steps:
    - name: generate-dockerfile
      image: registry.redhat.io/ubi8/ubi-minimal:latest
      script: |
        #!/bin/sh
        set -e

        cd $(workspaces.shared-workspace.path)

        cat <<EOF > Dockerfile
        FROM $(params.base-image)
        EOF

        if [ -n "$(params.envs)" ]; then
          for pair in $(params.envs); do
            echo "ENV $pair" >> Dockerfile
          done
        fi

        echo -n 'ENTRYPOINT ["'$(params.command)'"' >> Dockerfile
        if [ -n "$(params.args)" ]; then
          for arg in $(params.args); do
            echo -n ', "'$arg'"' >> Dockerfile
          done
        fi
        echo ']' >> Dockerfile

        echo ">>> Dockerfile:"
        cat Dockerfile

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-and-push
spec:
  params:
    - name: registry
      type: string
      description: >
        OpenShift internal registry
        (e.g. "image-registry.openshift-image-registry.svc:5000/mcp-server-registry")
    - name: image-name
      type: string
      description: >
        Final image name (including tag), e.g. "my-project/my-app:latest"

  workspaces:
    - name: shared-workspace
      description: "Contains the generated Dockerfile"

  steps:
    - name: login-to-registry
      image: registry.redhat.io/rhel9/buildah
      securityContext:
        privileged: true
        runAsUser: 0
      script: |
        #!/bin/sh
        set -e

        ls -R /workspace

        # Use the ServiceAccount token to log in to the internal registry
        TOKEN="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"
        REGISTRY_HOST="$(echo $(params.registry) | cut -d'/' -f1)"

        # Perform Buildah login with the service account token
        buildah login \
          --username unused \
          --password "$TOKEN" \
          "$REGISTRY_HOST"
        echo "Logged in to registry $REGISTRY_HOST"

    - name: build-push
      image: registry.redhat.io/rhel9/buildah
      securityContext:
        privileged: true
        runAsUser: 0
      script: |
        #!/bin/sh
        set -e

        cd $(workspaces.shared-workspace.path)
        TARGET_IMAGE="$(params.registry)/$(params.image-name)"

        # TODO: Replace with creds from secret   
        buildah login \
          registry.redhat.io \
          --username "REDACTED" \
          --password "REDACTED"
        echo "Logged in to registry.redhat.io"

        buildah build \
          -t "$TARGET_IMAGE" \
          -f Dockerfile .

        buildah push --format docker "$TARGET_IMAGE"
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: mcp-server-build-pipeline
spec:
  params:
    - name: base-image
      type: string
      description: "Base image (e.g. 'node:16-alpine')"
    - name: command
      type: string
      description: "Executable to run inside the container (e.g. 'npx', 'uvx')"
    - name: args
      type: string
      default: ""
      description: |
        Space-separated arguments to the command (possibly empty).  
        Example: "script.js --flag"
    - name: envs
      type: string
      default: ""
      description: |
        Space-separated env vars in KEY=VALUE form (possibly empty).  
        Example: "API_KEY=abc ENV=prod"
    - name: registry
      type: string
      description: "OpenShift internal registry (e.g. 'image-registry.openshift-image-registry.svc:5000/my-project')"
    - name: image-name
      type: string
      description: "Final image name with tag (e.g. 'my-project/my-app:latest')"

  workspaces:
    - name: shared-workspace
      description: "Ephemeral workspace for Dockerfile and build context"

  tasks:
    - name: create-dockerfile
      taskRef:
        name: create-dockerfile
      params:
        - name: base-image
          value: "$(params.base-image)"
        - name: command
          value: "$(params.command)"
        - name: args
          value: "$(params.args)"
        - name: envs
          value: "$(params.envs)"
      workspaces:
        - name: shared-workspace
          workspace: shared-workspace

    - name: build-and-push
      runAfter:
        - create-dockerfile
      taskRef:
        name: build-and-push
      params:
        - name: registry
          value: "$(params.registry)"
        - name: image-name
          value: "$(params.image-name)"
      workspaces:
        - name: shared-workspace
          workspace: shared-workspace
---